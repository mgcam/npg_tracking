#!/usr/bin/env perl
#########
# Author:        jo3
# Created:       2010-04-28
#

package cbot_checker;

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Carp;
use DateTime;
use DateTime::Format::Strptime;
use English qw(-no_match_vars);
use POSIX qw(strftime);
use autodie qw(:all);

use Monitor::Cbot;
use Monitor::Cbot::InstrumentStatus;

our $VERSION = '0';

use Readonly;
Readonly::Scalar my $PROXY   => q{http://wwwcache.sanger.ac.uk:3128/};
Readonly::Scalar my $ERR_504 => q{504 Gateway Time-out};
Readonly::Scalar my $ERR_500 => q{500 read timeout};

local $ENV{http_proxy} = $PROXY;

my $mysql_strp    = DateTime::Format::Strptime->new( pattern => '%F %T', );
my $illumina_strp = DateTime::Format::Strptime->
    new( pattern => '%m/%d/%Y %I:%M %p', );



my $poll = Monitor::Cbot::InstrumentStatus->new_with_options();

croak $poll->label() . ' is not a cBot' if !$poll->is_cbot();


# Get the instrument status - this is the InstrumentStatus.xml served by the
# cbot rather than the usual sequencer instrument status in the database.
eval {
        $poll->current_status();
        1;
    }
    or do {

        # Exit cleanly if an instrument is down but otherwise croak.
        ## no critic (RegularExpressions::RequireExtendedFormatting )
        if ( $EVAL_ERROR =~ m/($ERR_500|$ERR_504)/ms ) {
            print {*STDERR} "$1\n" or carp $OS_ERROR;
            exit;
        }

        ## use critic
        croak $EVAL_ERROR;
    };

my $run_progress = $poll->percent_complete();

my $stamp = time_stamp();

$poll->db_entry->latest_contact($stamp);

$poll->db_entry->percent_complete($run_progress);

$poll->db_entry->update();


sub time_stamp {
    return strftime( '%F %T', localtime );
}

sub illumina2mysql_datetime {
    my ($illumina_timestamp) = @_;

    croak 'Timestamp argument required' if !defined $illumina_timestamp;

    my $date_time = $illumina_strp->parse_datetime($illumina_timestamp);
    
    return $mysql_strp->format_datetime($date_time);
}


1;

__END__


=head1 NAME

cbot_checker - Monitor cBot XML reports and update the database accordingly.

=head1 VERSION

=head1 SYNOPSIS

    C<perl cbot_checker --id int [--dev string]>

=head1 DESCRIPTION

This script takes the database id (or instrument name) of an active cBot and
queries it for all the status information it knows about.

It takes an optional '--dev' argument for testing to switch it to use the
development database. I.e.

    C<perl cbot_checker --ident (int|string) --dev dev>

The default behaviour is to use the production system (live).

=head1 SUBROUTINES/METHODS

=head2 time_stamp

Return a formatted time stamp for inclusion in logs.

=head2 illumina2mysql_datetime

Convert the time stamp format used in the cbot XML to MySQL format.

=head1 CONFIGURATION AND ENVIRONMENT

Depends on the presence of the npg tracking system.

The environmental variable HTTP_PROXY must be set or the script will fall back
to a hard-coded default.

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

John O'Brien, E<lt>jo3@sanger.ac.ukE<gt>

=head1 LICENCE AND COPYRIGHT

Copyright (C) 2010 GRL, by John O'Brien

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
